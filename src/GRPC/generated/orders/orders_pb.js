// source: orders/orders.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.orders.rpcOrder', null, global);
goog.exportSymbol('proto.orders.rpcOrderAvailableReqest', null, global);
goog.exportSymbol('proto.orders.rpcOrderProduct', null, global);
goog.exportSymbol('proto.orders.rpcOrderReadyForPickupReqest', null, global);
goog.exportSymbol('proto.orders.rpcOrderStatus', null, global);
goog.exportSymbol('proto.orders.rpcOrderStatusChangedReqest', null, global);
goog.exportSymbol('proto.orders.rpcRequestResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orders.rpcOrderProduct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orders.rpcOrderProduct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orders.rpcOrderProduct.displayName = 'proto.orders.rpcOrderProduct';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orders.rpcOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orders.rpcOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orders.rpcOrder.displayName = 'proto.orders.rpcOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orders.rpcOrderStatusChangedReqest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orders.rpcOrderStatusChangedReqest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orders.rpcOrderStatusChangedReqest.displayName = 'proto.orders.rpcOrderStatusChangedReqest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orders.rpcOrderAvailableReqest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.orders.rpcOrderAvailableReqest.repeatedFields_, null);
};
goog.inherits(proto.orders.rpcOrderAvailableReqest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orders.rpcOrderAvailableReqest.displayName = 'proto.orders.rpcOrderAvailableReqest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orders.rpcOrderReadyForPickupReqest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orders.rpcOrderReadyForPickupReqest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orders.rpcOrderReadyForPickupReqest.displayName = 'proto.orders.rpcOrderReadyForPickupReqest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orders.rpcRequestResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orders.rpcRequestResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orders.rpcRequestResult.displayName = 'proto.orders.rpcRequestResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orders.rpcOrderProduct.prototype.toObject = function(opt_includeInstance) {
  return proto.orders.rpcOrderProduct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orders.rpcOrderProduct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orders.rpcOrderProduct.toObject = function(includeInstance, msg) {
  var f, obj = {
    productid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ingredients: jspb.Message.getFieldWithDefault(msg, 3, ""),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    quantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    imageurl: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orders.rpcOrderProduct}
 */
proto.orders.rpcOrderProduct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orders.rpcOrderProduct;
  return proto.orders.rpcOrderProduct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orders.rpcOrderProduct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orders.rpcOrderProduct}
 */
proto.orders.rpcOrderProduct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProductid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIngredients(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuantity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orders.rpcOrderProduct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orders.rpcOrderProduct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orders.rpcOrderProduct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orders.rpcOrderProduct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIngredients();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getImageurl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 productId = 1;
 * @return {number}
 */
proto.orders.rpcOrderProduct.prototype.getProductid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.orders.rpcOrderProduct} returns this
 */
proto.orders.rpcOrderProduct.prototype.setProductid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.orders.rpcOrderProduct.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.orders.rpcOrderProduct} returns this
 */
proto.orders.rpcOrderProduct.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ingredients = 3;
 * @return {string}
 */
proto.orders.rpcOrderProduct.prototype.getIngredients = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.orders.rpcOrderProduct} returns this
 */
proto.orders.rpcOrderProduct.prototype.setIngredients = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double price = 4;
 * @return {number}
 */
proto.orders.rpcOrderProduct.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.orders.rpcOrderProduct} returns this
 */
proto.orders.rpcOrderProduct.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int32 quantity = 5;
 * @return {number}
 */
proto.orders.rpcOrderProduct.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.orders.rpcOrderProduct} returns this
 */
proto.orders.rpcOrderProduct.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string imageUrl = 6;
 * @return {string}
 */
proto.orders.rpcOrderProduct.prototype.getImageurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.orders.rpcOrderProduct} returns this
 */
proto.orders.rpcOrderProduct.prototype.setImageurl = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orders.rpcOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.orders.rpcOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orders.rpcOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orders.rpcOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordernumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    date: jspb.Message.getFieldWithDefault(msg, 3, ""),
    customername: jspb.Message.getFieldWithDefault(msg, 4, ""),
    location: jspb.Message.getFieldWithDefault(msg, 5, ""),
    customerphone: jspb.Message.getFieldWithDefault(msg, 6, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orders.rpcOrder}
 */
proto.orders.rpcOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orders.rpcOrder;
  return proto.orders.rpcOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orders.rpcOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orders.rpcOrder}
 */
proto.orders.rpcOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrdernumber(value);
      break;
    case 2:
      var value = /** @type {!proto.orders.rpcOrderStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomername(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerphone(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orders.rpcOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orders.rpcOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orders.rpcOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orders.rpcOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdernumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCustomername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCustomerphone();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * optional int32 orderNumber = 1;
 * @return {number}
 */
proto.orders.rpcOrder.prototype.getOrdernumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.orders.rpcOrder} returns this
 */
proto.orders.rpcOrder.prototype.setOrdernumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional rpcOrderStatus status = 2;
 * @return {!proto.orders.rpcOrderStatus}
 */
proto.orders.rpcOrder.prototype.getStatus = function() {
  return /** @type {!proto.orders.rpcOrderStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.orders.rpcOrderStatus} value
 * @return {!proto.orders.rpcOrder} returns this
 */
proto.orders.rpcOrder.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string date = 3;
 * @return {string}
 */
proto.orders.rpcOrder.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.orders.rpcOrder} returns this
 */
proto.orders.rpcOrder.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string customerName = 4;
 * @return {string}
 */
proto.orders.rpcOrder.prototype.getCustomername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.orders.rpcOrder} returns this
 */
proto.orders.rpcOrder.prototype.setCustomername = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string location = 5;
 * @return {string}
 */
proto.orders.rpcOrder.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.orders.rpcOrder} returns this
 */
proto.orders.rpcOrder.prototype.setLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string customerPhone = 6;
 * @return {string}
 */
proto.orders.rpcOrder.prototype.getCustomerphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.orders.rpcOrder} returns this
 */
proto.orders.rpcOrder.prototype.setCustomerphone = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional double amount = 7;
 * @return {number}
 */
proto.orders.rpcOrder.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.orders.rpcOrder} returns this
 */
proto.orders.rpcOrder.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orders.rpcOrderStatusChangedReqest.prototype.toObject = function(opt_includeInstance) {
  return proto.orders.rpcOrderStatusChangedReqest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orders.rpcOrderStatusChangedReqest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orders.rpcOrderStatusChangedReqest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordernumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orders.rpcOrderStatusChangedReqest}
 */
proto.orders.rpcOrderStatusChangedReqest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orders.rpcOrderStatusChangedReqest;
  return proto.orders.rpcOrderStatusChangedReqest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orders.rpcOrderStatusChangedReqest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orders.rpcOrderStatusChangedReqest}
 */
proto.orders.rpcOrderStatusChangedReqest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrdernumber(value);
      break;
    case 2:
      var value = /** @type {!proto.orders.rpcOrderStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orders.rpcOrderStatusChangedReqest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orders.rpcOrderStatusChangedReqest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orders.rpcOrderStatusChangedReqest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orders.rpcOrderStatusChangedReqest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdernumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 orderNumber = 1;
 * @return {number}
 */
proto.orders.rpcOrderStatusChangedReqest.prototype.getOrdernumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.orders.rpcOrderStatusChangedReqest} returns this
 */
proto.orders.rpcOrderStatusChangedReqest.prototype.setOrdernumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional rpcOrderStatus status = 2;
 * @return {!proto.orders.rpcOrderStatus}
 */
proto.orders.rpcOrderStatusChangedReqest.prototype.getStatus = function() {
  return /** @type {!proto.orders.rpcOrderStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.orders.rpcOrderStatus} value
 * @return {!proto.orders.rpcOrderStatusChangedReqest} returns this
 */
proto.orders.rpcOrderStatusChangedReqest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.orders.rpcOrderAvailableReqest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orders.rpcOrderAvailableReqest.prototype.toObject = function(opt_includeInstance) {
  return proto.orders.rpcOrderAvailableReqest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orders.rpcOrderAvailableReqest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orders.rpcOrderAvailableReqest.toObject = function(includeInstance, msg) {
  var f, obj = {
    neworder: (f = msg.getNeworder()) && proto.orders.rpcOrder.toObject(includeInstance, f),
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.orders.rpcOrderProduct.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orders.rpcOrderAvailableReqest}
 */
proto.orders.rpcOrderAvailableReqest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orders.rpcOrderAvailableReqest;
  return proto.orders.rpcOrderAvailableReqest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orders.rpcOrderAvailableReqest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orders.rpcOrderAvailableReqest}
 */
proto.orders.rpcOrderAvailableReqest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.orders.rpcOrder;
      reader.readMessage(value,proto.orders.rpcOrder.deserializeBinaryFromReader);
      msg.setNeworder(value);
      break;
    case 2:
      var value = new proto.orders.rpcOrderProduct;
      reader.readMessage(value,proto.orders.rpcOrderProduct.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orders.rpcOrderAvailableReqest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orders.rpcOrderAvailableReqest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orders.rpcOrderAvailableReqest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orders.rpcOrderAvailableReqest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNeworder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.orders.rpcOrder.serializeBinaryToWriter
    );
  }
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.orders.rpcOrderProduct.serializeBinaryToWriter
    );
  }
};


/**
 * optional rpcOrder newOrder = 1;
 * @return {?proto.orders.rpcOrder}
 */
proto.orders.rpcOrderAvailableReqest.prototype.getNeworder = function() {
  return /** @type{?proto.orders.rpcOrder} */ (
    jspb.Message.getWrapperField(this, proto.orders.rpcOrder, 1));
};


/**
 * @param {?proto.orders.rpcOrder|undefined} value
 * @return {!proto.orders.rpcOrderAvailableReqest} returns this
*/
proto.orders.rpcOrderAvailableReqest.prototype.setNeworder = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orders.rpcOrderAvailableReqest} returns this
 */
proto.orders.rpcOrderAvailableReqest.prototype.clearNeworder = function() {
  return this.setNeworder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orders.rpcOrderAvailableReqest.prototype.hasNeworder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated rpcOrderProduct products = 2;
 * @return {!Array<!proto.orders.rpcOrderProduct>}
 */
proto.orders.rpcOrderAvailableReqest.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.orders.rpcOrderProduct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.orders.rpcOrderProduct, 2));
};


/**
 * @param {!Array<!proto.orders.rpcOrderProduct>} value
 * @return {!proto.orders.rpcOrderAvailableReqest} returns this
*/
proto.orders.rpcOrderAvailableReqest.prototype.setProductsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.orders.rpcOrderProduct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.orders.rpcOrderProduct}
 */
proto.orders.rpcOrderAvailableReqest.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.orders.rpcOrderProduct, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.orders.rpcOrderAvailableReqest} returns this
 */
proto.orders.rpcOrderAvailableReqest.prototype.clearProductsList = function() {
  return this.setProductsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orders.rpcOrderReadyForPickupReqest.prototype.toObject = function(opt_includeInstance) {
  return proto.orders.rpcOrderReadyForPickupReqest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orders.rpcOrderReadyForPickupReqest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orders.rpcOrderReadyForPickupReqest.toObject = function(includeInstance, msg) {
  var f, obj = {
    neworder: (f = msg.getNeworder()) && proto.orders.rpcOrder.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orders.rpcOrderReadyForPickupReqest}
 */
proto.orders.rpcOrderReadyForPickupReqest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orders.rpcOrderReadyForPickupReqest;
  return proto.orders.rpcOrderReadyForPickupReqest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orders.rpcOrderReadyForPickupReqest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orders.rpcOrderReadyForPickupReqest}
 */
proto.orders.rpcOrderReadyForPickupReqest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.orders.rpcOrder;
      reader.readMessage(value,proto.orders.rpcOrder.deserializeBinaryFromReader);
      msg.setNeworder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orders.rpcOrderReadyForPickupReqest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orders.rpcOrderReadyForPickupReqest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orders.rpcOrderReadyForPickupReqest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orders.rpcOrderReadyForPickupReqest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNeworder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.orders.rpcOrder.serializeBinaryToWriter
    );
  }
};


/**
 * optional rpcOrder newOrder = 1;
 * @return {?proto.orders.rpcOrder}
 */
proto.orders.rpcOrderReadyForPickupReqest.prototype.getNeworder = function() {
  return /** @type{?proto.orders.rpcOrder} */ (
    jspb.Message.getWrapperField(this, proto.orders.rpcOrder, 1));
};


/**
 * @param {?proto.orders.rpcOrder|undefined} value
 * @return {!proto.orders.rpcOrderReadyForPickupReqest} returns this
*/
proto.orders.rpcOrderReadyForPickupReqest.prototype.setNeworder = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orders.rpcOrderReadyForPickupReqest} returns this
 */
proto.orders.rpcOrderReadyForPickupReqest.prototype.clearNeworder = function() {
  return this.setNeworder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orders.rpcOrderReadyForPickupReqest.prototype.hasNeworder = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orders.rpcRequestResult.prototype.toObject = function(opt_includeInstance) {
  return proto.orders.rpcRequestResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orders.rpcRequestResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orders.rpcRequestResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    succeeded: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    errormessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orders.rpcRequestResult}
 */
proto.orders.rpcRequestResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orders.rpcRequestResult;
  return proto.orders.rpcRequestResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orders.rpcRequestResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orders.rpcRequestResult}
 */
proto.orders.rpcRequestResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSucceeded(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orders.rpcRequestResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orders.rpcRequestResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orders.rpcRequestResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orders.rpcRequestResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSucceeded();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool succeeded = 1;
 * @return {boolean}
 */
proto.orders.rpcRequestResult.prototype.getSucceeded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.orders.rpcRequestResult} returns this
 */
proto.orders.rpcRequestResult.prototype.setSucceeded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string errorMessage = 2;
 * @return {string}
 */
proto.orders.rpcRequestResult.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.orders.rpcRequestResult} returns this
 */
proto.orders.rpcRequestResult.prototype.setErrormessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.orders.rpcOrderStatus = {
  UNKNOWN: 0,
  NEW: 1,
  PREPARING: 2,
  PREPARED: 3,
  DELIVERING: 4,
  DELIVERED: 5
};

goog.object.extend(exports, proto.orders);
